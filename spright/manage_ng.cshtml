@model Sabio.Web.Models.ViewModels.ItemViewModel<int?>
@{
    ViewBag.Title = "manage_ng";
    Layout = "~/Views/Shared/_LayoutUmega.cshtml";
}

<h2>Contact </h2>

<div>
    <div class="panel-body" data-ng-controller="ContactController as main" id="contactCtlr">

        <div>
            <form id="contactForm" class="form-horizontal" name="main.contactForm" ng-submit="main.AddContact()" novalidate>
                <div class="form-inline"></div>
                <div class="form-group col-sm-4">
                    <label col-md-4 class="control-label" for="textfullName">Full name</label>
                    <input data-ng-model="main.item.fullName"
                           type="text"
                           name="fullName"
                           id="fullName"
                           class="form-control ng-class:{'error' : main.showitemErrors && !main.contactForm.fullName.$valid}"
                           required>
                    <div role="alert" class="help-inline error" style="color:blue;">
                        <span class="error" ng-show="main.showitemErrors && main.contactForm.fullName.$error.required">Full Name is required</span>
                    </div>
                </div>




                <div class="form-group col-sm-4 col-md-4">
                    <label class="control-label" for="textemail">Email address</label>

                    <input data-ng-model="main.item.email"
                           type="text"
                           name="email"
                           id="emailAddress"
                           class="form-control ng-class:{'error': main.showitemErrors && !main.contactForm.email.$valid}"
                           required>
                    <div role="alert" class="help-inline error" style="color:blue;">
                        <span class="error" ng-show="main.showitemErrors && main.contactForm.email.$error.required">Email is required</span>

                       <span class="error" ng-show="main.showitemErrors && main.contactForm.email.$error.required">Must be a valid email address</span>
                    </div>
                </div>


                <div class="form-group col-sm-4 col-md-4">
                    <label class="control-label" for="textsubject">Subject</label>
                    <input data-ng-model="main.item.subject"
                           type="text"
                           name="subject"
                           id="subject"
                           class="form-control ng-class:{'error': main.showitemErrors && !main.contactForm.subject.$valid}"
                           required>
                    <div role="alert" class="help-inline error" style="color:blue;">
                        <span class="error" ng-show="main.showitemErrors && main.contactForm.subject.$error.required">Subject is required</span>
                    </div>

                </div>


                <div class="textarea form-group col-sm-12 col-md-12">
                    <label class="control-label" for="textmessage">Message</label>
                    <textarea data-ng-model="main.item.message"
                              class="form-control ng-class:{'error': main.showitemErrors && !main.contactForm.message.$valid}"
                              type="text"
                              name="message"
                              id="message"
                              required></textarea>
                    <div role="alert" class="help-inline error" style="color:blue;">
                        <span class="error" ng-show="main.showitemErrors && main.contactForm.message.$error.required">Message is required</span>
                    </div>
                </div>

                <div class="form-group col-md-3">
                    <button class="btn btn-primary btn-block" id="contact" type="submit">Contact</button>
                </div>
            </form>
            <input type="hidden" id="contactUpdateId" value="@Model.Item" />
        </div>
    </div>
</div>


@section scripts{
    <script src="~/Scripts/sabio/application/Contact/Controllers/contactController.js"></script>

    <script src="~/Scripts/sabio/application/services/ContactService.js"></script>
    <script src="~/Scripts/sabio/application/Contact/contact.config.js"></script>
    <script src="~/Scripts/services/sabio.service.contact.js"></script>
    <script type="text/javascript">
        ////contact service

        //(function () {
        //    "use strict";

        //    angular.module(APPNAME)
        //        .factory('$contactService', contactServiceFactory);


        //    contactServiceFactory.$inject = ['$baseService', '$sabio'];

        //    function contactServiceFactory($baseService, $sabio) {

        //        var aSabioServiceObject = sabio.services.contactpage;


        //        var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);

        //        return newService;
        //    }

        //})();

        //controller
        //(function () {
        //    "use strict";

        //    angular.module(APPNAME)
        //        .controller('ContactController', ContactController);

        //    ContactController.$inject = ['$scope', '$baseController', "$contactService"];

        //    function ContactController(
        //        $scope
        //        , $baseController
        //        , $contactService) {

        //        var vm = this;//this points to a new {}

        //        vm.item = null;
        //        vm.selectedEmployee = null;
        //        vm.contactForm = null;
        //        vm.AddContact = null;

        //        vm.showitemErrors = false;


        //        //vm.showNewEmployeeErrors = false;
        //        vm.UpdateContact = _UpdateContact;
        //        vm.AddContact = _AddContact;
        //        vm.$contactService = $contactService;
        //        vm.onUpdateSuccess = _onUpdateSuccess;
        //        vm.contactUpdateId = $("#contactUpdateId").val();
        //        vm.$scope = $scope;


        //        // vm.receiveItems = _receiveItems;
        //        vm.onEmpError = _onEmpError;
        //        vm.selectEmployee = _selectEmployee;



        //        //-- this line to simulate inheritance
        //        $baseController.merge(vm, $baseController);

        //        //this is a wrapper for our small dependency on $scope
        //        vm.notify = vm.$contactService.getNotifier($scope);

        //        //this is like the sabio.startUp function
        //        render();

        //        function render() {
        //            if (vm.contactUpdateId && vm.contactUpdateId.length > 0) {
        //                console.log("Edit mode - Render Existing Info");
        //                vm.$contactService.byId(vm.contactUpdateId, _onContactPopById, _onEmpError);
        //            }
        //        }
        //        function _onContactPopById(data) {
        //            console.log("edit", data);

        //            vm.notify(function () {
        //                vm.item = data.item;
        //                console.log("contact working", vm.item);
        //            });
        //        }

        //        function _resetEmployeeForm() {
        //            console.log("reset form");
        //            vm.employeeFormVisible = false;
        //            vm.showNewEmployeeErrors = false;
        //            vm.newEmployee = null;
        //            vm.employeeForm.$setPristine();
        //            vm.employeeForm.$setUntouched()
        //        }

        //        function _contactForm() {
        //            console.log("show form!");
        //            vm.contactFormVisible = !vm.contactFormVisible;
        //        }

        //        function _AddContact() {
        //            vm.showitemErrors = true;

        //            if (vm.contactForm.$valid) {
        //                console.log("data is valid! go save this object -> ", vm.newEmployee);
        //                if (vm.contactUpdateId && vm.contactUpdateId.length > 0) {
        //                    vm.$contactService.UpdateContact(vm.contactUpdateId, vm.item, _onUpdateSuccess, _onUpdateError);
        //                }
        //                else {
        //                    vm.$contactService.AddContact(vm.item, _insertSuccess, _onEmpError);
        //                }
        //            }

        //            else {
        //                console.log("form submitted with invalid data")
        //            }
        //        }


        //        function __insertSuccess(response) {
        //            console.log(response)
        //            //vm.$alertService.success();
        //        }

        //        function _UpdateContact(contactUpdateId) {
        //            console.log("test", contactUpdateId);
        //            //vm.$alertService.success();
        //            vm.showitemErrors = true;
        //            vm.$contactService.UpdateContact(vm.contactUpdateId, vm.item, _onUpdateSuccess, _onUpdateError);
        //            //vm.$alertService.success();
        //        }

        //        function _onUpdateSuccess(data) {
        //            console.log(vm.onUpdateSuccess, data);
        //            vm.$alertService.success("Contact Update!");
        //            window.location.href = '/contact/list/';
        //            render();
        //            vm.notify(function () {
        //                vm.item = data.item;
        //                console.log("contact working", vm.item);
        //            });
        //        }

        //        function _onUpdateError(error) {
        //            console.log(error)
        //            vm.$alertService.error("Contact Error");
        //        }


        //        function _echoEmployee() {
        //            console.log("ECHO employee -> ", vm.newEmployee);
        //        }

        //        function _selectEmployee(anEmp) {
        //            console.log(anEmp);
        //            vm.selectedEmployee = anEmp;
        //        }

        //        function _saveStatus(anEmp) {
        //            console.log("Go and save this new data");
        //            console.log(anEmp);
        //        }

        //        function _onEmpError(jqXhr, error) {
        //            console.error(error);
        //            //vm.$alertService.error();
        //        }
        //    }
        //})();

    </script>
}

